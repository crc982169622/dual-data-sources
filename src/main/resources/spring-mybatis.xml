<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

    <!-- 自动扫描 -->
    <context:component-scan base-package="com.crc.dual.data.sources" >
        <!-- 不扫描@Controller注解的类-->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 引入配置文件 -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc.properties" />
    </bean>

    <!-- 两个数据源的功用配置，方便下面直接引用 -->
    <bean id="abstractXADataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init"
          destroy-method="close" abstract="true">
        <property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource"/>
        <property name="poolSize" value="10" />
        <property name="minPoolSize" value="10"/>
        <property name="maxPoolSize" value="30"/>
        <property name="borrowConnectionTimeout" value="60"/>
        <property name="reapTimeout" value="20"/>
        <!-- 最大空闲时间 -->
        <property name="maxIdleTime" value="60"/>
        <property name="maintenanceInterval" value="60" />
        <property name="loginTimeout" value="60"/>
        <property name="logWriter" value="60"/>
        <property name="testQuery">
            <value>select 1</value>
        </property>

    </bean>

    <!-- 配置第一个数据源 -->
    <bean id="dataSource" parent="abstractXADataSource">
        <!-- value只要两个数据源不同就行，随便取名 -->
        <property name="uniqueResourceName" value="dataSource" />
        <property name="xaDataSourceClassName"
                  value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" />
        <property name="xaProperties">
            <props>
                <prop key="URL">${url}</prop>
                <prop key="user">${username}</prop>
                <prop key="password">${password}</prop>
            </props>
        </property>
    </bean>

    <bean id="dataSource1" parent="abstractXADataSource">
        <!-- value只要两个数据源不同就行，随便取名 -->
        <property name="uniqueResourceName" value="dataSource1" />
        <property name="xaDataSourceClassName"
                  value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" />
        <property name="xaProperties">
            <props>
                <prop key="URL">${url1}</prop>
                <prop key="user">${username1}</prop>
                <prop key="password">${password1}</prop>
            </props>
        </property>
    </bean>

    <bean id="dynamicDataSource" class="com.crc.dual.data.sources.config.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <!-- 通过不同的key决定用哪个dataSource -->
                <entry value-ref="dataSource" key="dataSource"></entry>
                <entry value-ref="dataSource1" key="dataSource1"></entry>
            </map>
        </property>
        <!-- 设置默认的dataSource -->
        <property name="defaultTargetDataSource" ref="dataSource"></property>
    </bean>

    <!-- spring和MyBatis整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
    </bean>

    <bean id="sqlSessionFactory1" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource1" />
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
    </bean>

    <!-- 配置自定义的SqlSessionTemplate模板，注入相关配置 -->
    <bean id="sqlSessionTemplate" class="com.crc.dual.data.sources.config.CustomSqlSessionTemplate" scope="prototype">
        <constructor-arg ref="sqlSessionFactory" />
        <property name="targetSqlSessionFactorys">
            <map>
                <entry value-ref="sqlSessionFactory" key="dataSource"/>
                <entry value-ref="sqlSessionFactory1" key="dataSource1"/>
            </map>
        </property>
    </bean>

    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.crc.dual.data.sources.dao" />
        <property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate"/>
    </bean>

    <bean id="jtaTransactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
        <property name="transactionManager">
            <bean class="com.atomikos.icatch.jta.UserTransactionManager" init-method="init" destroy-method="close">
                <property name="forceShutdown" value="true"/>
            </bean>
        </property>
        <property name="userTransaction">
            <bean class="com.atomikos.icatch.jta.UserTransactionImp"/>
        </property>
    </bean>

    <!-- spring 事务模板，和spring的jta事务类似功能 -->
    <bean id="transactionTemplate"
          class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager">
            <ref bean="jtaTransactionManager" />
        </property>
    </bean>

    <tx:annotation-driven transaction-manager="jtaTransactionManager" proxy-target-class="true"/>

    <aop:config proxy-target-class="true">
        <aop:aspect id="dataSourceAspect" ref="dataSourceAop" order="1">
            <aop:pointcut id="tx" expression="execution(* com..service..*.*(..)) "/>
            <aop:before pointcut-ref="tx" method="dataSwitch" />
            <aop:after pointcut-ref="tx" method="clearDataSource"/>
        </aop:aspect>
    </aop:config>
</beans>
